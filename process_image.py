import torch
import cv2
import numpy as np
from model import ArmenianLetterNet  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å

# üîπ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
confidence_threshold = 0.55

# üîπ –ê—Ä–º—è–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç (–æ—Ç –Æ–Ω–∏–∫–æ–¥–∞ 1329 –¥–æ 1366)
armenian_alphabet = [chr(code) for code in range(0x0531, 0x0557)]

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = ArmenianLetterNet()
model.load_state_dict(torch.load("armenian_letters_model_2.pth", map_location="cpu"))
model.eval()

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def capture_and_analyze():
    # –ó–∞—Ö–≤–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–∞–º–µ—Ä—ã
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        return "–û—à–∏–±–∫–∞: –ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞."

    ret, frame = cap.read()
    if not ret:
        return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    image = cv2.resize(image, (32, 32))
    image_tensor = torch.tensor(image, dtype=torch.float32).unsqueeze(0).unsqueeze(0) / 255.0  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    with torch.no_grad():
        output = model(image_tensor)
        probabilities = torch.nn.functional.softmax(output, dim=1)
        confidence, predicted_class = torch.max(probabilities, 1)

    confidence_value = confidence.item()
    predicted_index = predicted_class.item()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    if 0 <= predicted_index < len(armenian_alphabet):
        predicted_letter = armenian_alphabet[predicted_index]
    else:
        predicted_letter = "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if confidence_value >= confidence_threshold:
        result = f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –±—É–∫–≤–∞: {predicted_letter} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_value:.2f}"
    else:
        result = f"‚ö†Ô∏è –ë—É–∫–≤–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é! ({confidence_value:.2f})"

    cap.release()
    return result

# üîπ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
if __name__ == "__main__":
    result = capture_and_analyze()
    print(result)  # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å