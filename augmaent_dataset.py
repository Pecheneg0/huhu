import cv2
import numpy as np
import os
from PIL import Image, ImageDraw, ImageFont, ImageFilter
import random

# üîπ –ü—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É
dataset_path = "dataset_generated_2"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞
if not os.path.exists(dataset_path):
    raise FileNotFoundError(f"‚ùå –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ {dataset_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

# üîπ –ê—Ä–º—è–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç (–±—É–∫–≤—ã –æ—Ç U+0531 –¥–æ U+0556)
armenian_letters = [chr(code) for code in range(0x0531, 0x0557)]

# üîπ –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
img_size = 128   # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
final_size = 32  # –†–∞–∑–º–µ—Ä –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

# üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã
num_new_images = 200  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å

# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏
for letter in armenian_letters:
    letter_folder = os.path.join(dataset_path, letter)
    
    if not os.path.exists(letter_folder):
        print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–∞–ø–∫–∞ {letter} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—é...")
        os.makedirs(letter_folder)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    existing_images = len(os.listdir(letter_folder))  # –°–∫–æ–ª—å–∫–æ —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    for i in range(num_new_images):
        img = Image.new('L', (img_size, img_size), 255)  # –ë–µ–ª—ã–π —Ñ–æ–Ω
        draw = ImageDraw.Draw(img)

        # üîπ –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à—Ä–∏—Ñ—Ç (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∞—Ä–º—è–Ω—Å–∫–∏–µ —à—Ä–∏—Ñ—Ç—ã)
        font_path = random.choice([
            "/System/Library/Fonts/Supplemental/Arial.ttf",
            "/System/Library/Fonts/Supplemental/Times New Roman.ttf"
        ])  
        font = ImageFont.truetype(font_path, random.randint(80, 120))

        # üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞
        bbox = draw.textbbox((0, 0), letter, font=font)
        w, h = bbox[2] - bbox[0], bbox[3] - bbox[1]
        draw.text(((img_size - w) // 2, (img_size - h) // 2), letter, font=font, fill=0)

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
        img = img.rotate(random.uniform(-20, 20), fillcolor=255)

        # ‚úÖ –†–∞–∑–º—ã—Ç–∏–µ (–∏–º–∏—Ç–∞—Ü–∏—è –≤–∏–±—Ä–∞—Ü–∏–∏ –¥—Ä–æ–Ω–∞)
        img = img.filter(ImageFilter.GaussianBlur(random.uniform(0, 1)))

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
        noise = np.random.normal(0, 15, (img_size, img_size))
        img_np = np.array(img) + noise
        img_np = np.clip(img_np, 0, 255).astype(np.uint8)
        img = Image.fromarray(img_np)

        # ‚úÖ –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 32x32 (—Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏)
        img = img.resize((final_size, final_size))

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_name = os.path.join(letter_folder, f"new_{existing_images + i}.png")
        img.save(file_name)

print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç {dataset_path} —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω!")
